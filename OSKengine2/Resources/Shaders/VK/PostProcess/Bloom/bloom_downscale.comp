#version 460

layout (local_size_x = 4, local_size_y = 4) in;

layout (set = 0, binding = 0) uniform sampler2D inputImg;
layout (set = 0, binding = 1, rgba32f) uniform image2D outputImg;

layout (push_constant) uniform Info{
    vec4 infos;
} info;


/*

A   B   C
  D   E
F   G   H
  I   J
K   L   M

*/

void main() {
    const vec2 previousResolution = info.infos.xy;
    const vec2 nextResolution = info.infos.zw;

    const vec2 currentCoords = vec2(gl_GlobalInvocationID.xy);
    
    if (currentCoords.x > nextResolution.x || currentCoords.y > nextResolution.y)
        return;
    
    const vec2 previousCoordinates = currentCoords * 2; //(previousResolution / nextResolution) * currentCoords;

    const vec2 sourcePixelSize = 1.0 / textureSize(inputImg, 0);

    const vec4 A = texture(inputImg, (previousCoordinates + vec2(-2, -2)) * sourcePixelSize);
    const vec4 B = texture(inputImg, (previousCoordinates + vec2( 0, -2)) * sourcePixelSize);
    const vec4 C = texture(inputImg, (previousCoordinates + vec2( 2, -2)) * sourcePixelSize);
    
    const vec4 D = texture(inputImg, (previousCoordinates + vec2(-1, -1)) * sourcePixelSize);
    const vec4 E = texture(inputImg, (previousCoordinates + vec2( 1, -1)) * sourcePixelSize);
    
    const vec4 F = texture(inputImg, (previousCoordinates + vec2(-2,  0)) * sourcePixelSize);
    const vec4 G = texture(inputImg, (previousCoordinates + vec2( 0,  0)) * sourcePixelSize);
    const vec4 H = texture(inputImg, (previousCoordinates + vec2( 2,  0)) * sourcePixelSize);
    
    const vec4 I = texture(inputImg, (previousCoordinates + vec2(-1,  1)) * sourcePixelSize);
    const vec4 J = texture(inputImg, (previousCoordinates + vec2( 1,  1)) * sourcePixelSize);
    
    const vec4 K = texture(inputImg, (previousCoordinates + vec2(-2,  2)) * sourcePixelSize);
    const vec4 L = texture(inputImg, (previousCoordinates + vec2( 0,  2)) * sourcePixelSize);
    const vec4 M = texture(inputImg, (previousCoordinates + vec2( 2,  2)) * sourcePixelSize);
    
    const vec4 color = (A + B + F + G) * 0.25 * 0.125
                     + (B + C + G + H) * 0.25 * 0.125
                     + (F + G + K + L) * 0.25 * 0.125
                     + (G + H + L + M) * 0.25 * 0.125
                     + (D + E + I + J) * 0.25 * 0.5;

    imageStore(outputImg, ivec2(currentCoords.xy), color);
}
