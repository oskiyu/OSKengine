#version 460

layout (local_size_x = 8, local_size_y = 8) in;

layout (set = 0, binding = 0) uniform sampler2D sceneImage;
layout (set = 0, binding = 1) uniform sampler2D historicalImage;
layout (set = 0, binding = 2) uniform sampler2D velocityImage;

layout (set = 0, binding = 5, rgba16f) uniform writeonly image2D finalImg;

float GetLuminosity(vec3 color) {
    return dot(color, vec3(0.299, 0.587, 0.114));
}

float GetLuminosity(vec4 color) {
    return GetLuminosity(color.rgb);
}

const float GKERNEL[3][3] = {
  { 1 / 16.0, 1 / 8.0,  1 / 16.0},
  { 1 / 8.0, 1 / 4.0,  1 / 8.0},
  { 1 / 16.0, 1 / 8.0,  1 / 16.0}  
};

void main() {
    const vec2 ndcInverseRatio = textureSize(velocityImage, 0).xy;
    const vec2 ndcRatio = 1.0 / ndcInverseRatio;

    const ivec2 coords = ivec2(gl_GlobalInvocationID.xy);

    // Rango [0, 1]
    const vec2 normalizedCoords = (coords + 0.5) * ndcRatio;

    const vec2 normalizedMotion = texelFetch(velocityImage, coords, 0).xy;
    const vec4 currentColor = texelFetch(sceneImage, coords, 0);

    // Rango [0, 1]
    const vec2 previousNormalizedCoords = normalizedCoords + normalizedMotion;

    // Filtro gaussiano

    // Parte entera de las coordenadas.
    const vec2 intCoords = floor(previousNormalizedCoords * ndcRatio);
    // Parte decimal de las coordenadas.
    const vec2 fracCoords = fract(previousNormalizedCoords * ndcRatio);
    
    // Offset de las coordenadas anteriores respecto al centro del p√≠xel.
    const vec2 offsetFromCenter = fracCoords - vec2(0.5);

    vec3 previousGaussianColor = vec3(0.0);
    for (int x = -1; x <= 1; x++) {
        for (int y = -1; y <= 1; y++) {
            const vec2 nCoords = previousNormalizedCoords + vec2(x, y) * ndcRatio;
            previousGaussianColor += textureLod(historicalImage, nCoords, 0).rgb;
        }
    }

    vec4 previousColor = texture(historicalImage, previousNormalizedCoords);
    

    vec3 boxMin = vec3( 1000);
    vec3 boxMax = vec3(-1000);

    vec3 crossMin = vec3( 1000);
    vec3 crossMax = vec3(-1000);

    vec3 colorMoment1 = vec3(0);
    vec3 colorMoment2 = vec3(0);

    for (int x = -1; x <= 1; x++) {
        for (int y = -1; y <= 1; y++) {
            const vec3 nColor = texelFetch(sceneImage, coords + ivec2(x, y), 0).rgb;

            colorMoment1 += nColor;
            colorMoment2 += nColor * nColor;

            boxMin = min(boxMin, nColor);
            boxMax = max(boxMax, nColor);

            if (x == 0 || y == 0) {
                crossMin = min(crossMin, nColor);
                crossMax = max(crossMax, nColor);
            }
        }
    }

    const int N = 3 * 3;
    const vec3 media = colorMoment1 / N;
    const vec3 desviacionTipica = sqrt(colorMoment2 / N - media * media);
    
    const float maxColorDiscardStrength = 0.75;

    const float pixelsMotionLength = length(normalizedMotion * ndcInverseRatio);
    const float colorDiscardStrength = clamp(1.0 - pow(pixelsMotionLength - 3.0, 3.0), 0.25, 0.75);

    vec3 colorDiscardMin = media - colorDiscardStrength * desviacionTipica;
    vec3 colorDiscardMax = media + colorDiscardStrength * desviacionTipica;

    colorDiscardMin = clamp(colorDiscardMin, boxMin, boxMax);
    colorDiscardMax = clamp(colorDiscardMax, boxMin, boxMax);

    // const vec3 colorDiscardMin = mix(boxMin, crossMin, 0.5);
    // const vec3 colorDiscardMax = mix(boxMax, crossMax, 0.5);

    /**/
    previousColor.rgb = clamp(previousColor.rgb, colorDiscardMin, colorDiscardMax);
    /**/

    // fract = parte decimal
    // const vec2 decimalPixelMotion = abs(0.5 - abs(fract(ndcMotion * ndcInverseRatio)));
    // vec2 pixelsMotion = abs(sqrt(decimalPixelMotion * 1));
    // pixelsMotion = abs(fract(ndcMotion * ndcInverseRatio));

    float ratio = 0.0; // min(pixelsMotion.x, pixelsMotion.y);

    const float maxRatio = 0.9;
    ratio = mix(0.0, maxRatio, ratio);

    vec3 colorDiff = mix(
        abs(colorDiscardMin.rgb - colorDiscardMax.rgb),
        abs(previousColor.rgb - currentColor.rgb),
        0.0);
    float colorDiffRatio = 1.0 - length(colorDiff) * 2.0;

    ratio = colorDiffRatio;

    ratio = clamp(ratio, 0.0, maxRatio);
    vec4 color = mix(currentColor, previousColor, ratio);

    // color = mix(color, previousGaussianColor, 1.0 - clamp(1.0 - ratio * ratio, 0, 0.2));
    // if (ratio < 0.5) color = mix(color, vec3(1, ratio, ratio), ratio * 2); // length(ndcMotion * ndcInverseRatio) - 1.0)

    imageStore(finalImg, coords, vec4(color.rgb, currentColor.a));
}
