#version 460

layout (local_size_x = 8, local_size_y = 8) in;

#include "../../common.glsl"

layout (set = 0, binding = 0) uniform Camera {
    mat4 projection;
    mat4 view;
    mat4 projectionView;
    vec4 cameraPos;
    vec2 nearFarPlanes;
} camera;


// Lights & shadows
layout (set = 0, binding = 1) uniform DirLightShadowMat {
    mat4[4] matrix;
    vec4 splits;
} dirLightShadowMat;

layout (set = 0, binding = 2) uniform DirLight {
    vec4 directionAndIntensity;
    vec4 color;
} dirLight;

layout (set = 0, binding = 3) uniform samplerCube irradianceMap;
layout (set = 0, binding = 4) uniform sampler2DArray dirLightShadowMap;
layout (set = 0, binding = 5) uniform samplerCube specularMap;
layout (set = 0, binding = 6) uniform sampler2D specularLut;


layout (set = 1, binding = 0) uniform highp sampler2D depthTexture;
layout (set = 1, binding = 1) uniform sampler2D colorTexture;
layout (set = 1, binding = 2) uniform sampler2D normalTexture;
layout (set = 1, binding = 3) uniform sampler2D metallicRoughnessTexture;

layout (set = 2, binding = 0) uniform writeonly image2D finalImage;

layout(push_constant) uniform Taa {
    int index;
} taa;

const vec2 jitterValues[] = {
    vec2(0, 0),

    vec2(.9, 1),
    vec2(-.9, -1),
    vec2(-1, .9),
    vec2(1, -.9),
};

mat4 GetJitterMatrix() {
    const vec2 resolution = textureSize(depthTexture, 0);

	const float deltaWidth = 1 / resolution.x;
	const float deltaHeight = 1 / resolution.y;

    const float jitterScale = 0.55;
    mat4 jitterMatrix = mat4(1.0);
    jitterMatrix[3][0] += (jitterValues[taa.index].x) * deltaWidth * jitterScale;
    jitterMatrix[3][1] += (jitterValues[taa.index].y) * deltaHeight * jitterScale;

    return jitterMatrix;
}


vec4 GetClipSpacePosition(ivec2 coords) {
    const vec2 resolution = textureSize(depthTexture, 0);

    // Profundidad almacenada en la imagen de profundidad [0, 1].
    const highp float originalDepthValue = texelFetch(depthTexture, coords, 0).x;

    // Profundidad en el rango [-1, 1].
    const highp float normalizedDepth = 2.0 * originalDepthValue - 1.0;


    // Coordenadas en rango [0, 1].
    const vec2 normalizedCoords = vec2(coords) / resolution;

    // Coordenadas en rango [-1, 1].
    const vec2 ndcCoords = normalizedCoords * 2.0 - 1.0;

    // Posici√≥n en espacio de pantalla: x, y, profundidad.
    const vec4 clipSpacePosition = vec4(ndcCoords, originalDepthValue, 1.0);

    return clipSpacePosition;
}

vec4 GetViewSpace(ivec2 coords) {
    const vec4 clipSpacePosition = GetClipSpacePosition(coords) * vec4(1, -1, 1, 1);
    vec4 viewSpacePosition = inverse(camera.projection) * clipSpacePosition;

    viewSpacePosition /= viewSpacePosition.w;

    return vec4(viewSpacePosition.xyz, 1.0);
}

vec3 GetPositionFromDepth(ivec2 coords) {
    const vec4 result = inverse(camera.view) * GetViewSpace(coords);
    return result.xyz / result.w;
    // return (inverse(camera.projectionView) * GetClipSpacePosition(coords)).xyz;

    vec3 ndcPosition = GetClipSpacePosition(coords).xyz;

    vec4 clipPos;
    clipPos.w = camera.projection[3][2] / (ndcPosition.z - (camera.projection[2][2] / camera.projection[2][3]));
    clipPos.xyz = ndcPosition * clipPos.w;

    return (inverse(camera.projectionView) * clipPos).xyz;
}

void main() {
    const ivec2 coords = ivec2(gl_GlobalInvocationID);

    const vec4 colorInfo = texelFetch(colorTexture, coords, 0);
    const vec4 normalInfo = texelFetch(normalTexture, coords, 0);
    const vec2 materialInfo = texelFetch(metallicRoughnessTexture, coords, 0).xy;

    const vec3 worldPosition = GetPositionFromDepth(coords);
    
    const vec4 albedo = vec4(colorInfo.rgb, 1.0);
    const vec3 normal = normalize(normalInfo.xyz * 2.0 - 1.0);

    const vec3 view = normalize(camera.cameraPos.xyz - worldPosition);
    const vec3 reflectDirection = reflect(-view, normal);
    
    const float metallicFactor = clamp(materialInfo.x, 0.01, 1);
    const float roughnessFactor = clamp(materialInfo.y, 0.01, 1);
    
    vec3 F0 = vec3(DEFAULT_F0);
    F0 = mix(F0, albedo.rgb, metallicFactor);

    vec3 accummulatedRadiance = vec3(0.0);
    
    // Camera-Space: para el mapa de sombras
    const vec4 temp = camera.view * vec4(worldPosition, 1.0);
    const vec3 cameraSpacePosition = (temp / temp.w).xyz;
    
    // Directional Light
    accummulatedRadiance += 
    CalculateShadowStrength(
        cameraSpacePosition, 
        dirLightShadowMat.matrix, 
        dirLightShadowMat.splits, 
        dirLightShadowMap, 
        worldPosition) 
    * GetRadiance(
        F0, 
        dirLight.directionAndIntensity.xyz, 
        view, 
        normal, 
        dirLight.color.rgb * dirLight.directionAndIntensity.w, 
        albedo.rgb, 
        max(0.05, roughnessFactor), 
        metallicFactor);

    // Irradiance Map
    vec3 kS = FreshnelShlick(max(dot(normal, view), 0.0), F0);
    vec3 kD = 1.0 - kS;
    kD *= 1.0 - (metallicFactor); // * 0.2

    const vec3 irradiance = texture(irradianceMap, normal).rgb;
    const vec3 ambient = albedo.rgb * kD * irradiance;

    const float maxSpecularLod = 5 - 1;
    const vec3 F = FresnelSchlickRoughness(max(dot(normal, view), 0.0), F0, roughnessFactor);
    const vec3 prefilteredSpecularColor = textureLod(specularMap, reflectDirection, roughnessFactor * maxSpecularLod).rgb;
    const vec2 lut = textureLod(specularLut, vec2(max(dot(normal, view), roughnessFactor)), 0).rg;
    const vec3 specular = prefilteredSpecularColor * (F * lut.x + lut.y);
    
     
// #define NATURAL
// #define CUSTOM

#ifdef NATURAL
    const float ambientRatio = 1.0;
    const float radianceRatio = 1.0;
    const float specularRatio = 1.0;
#elif defined(CUSTOM)
    const float ambientRatio = 0.25;
    const float radianceRatio = 1.0;
    const float specularRatio = 0.25;
#else
    const float ambientRatio = 0.65;
    const float radianceRatio = 1.0;
    const float specularRatio = 0.65;
#endif

    vec3 color = ambient * (dirLight.directionAndIntensity.w * ambientRatio) 
                + accummulatedRadiance * radianceRatio 
                + specular * specularRatio;

    /*color = GetShadowmapCascade(
        cameraSpacePosition, 
        dirLightShadowMat.splits,
        dirLightShadowMat.matrix,
        worlPosition);/**/

    color = vec3(
        max(color.r, 0.01),
        max(color.g, 0.01),
        max(color.b, 0.01)
    );

    imageStore(finalImage, coords, vec4(color, normalInfo.a));
}
