#version 460

#extension GL_EXT_ray_tracing : require
#extension GL_EXT_nonuniform_qualifier : require

layout (set = 0, binding = 0) uniform accelerationStructureEXT topLevelAccelerationStructure;

layout (set = 1, binding = 0) uniform sampler2D gBufferPosition;
layout (set = 1, binding = 1, rgba8) uniform writeonly image2D shadowsImage;

// Ruido por píxel
layout (set = 1, binding = 3) uniform sampler2D noiseImage;
// Ruido por frame
layout (set = 1, binding = 4) uniform sampler2D noiseImageX;



struct RayResult {
    bool isInShadows;
};

layout (location = 0) rayPayloadEXT RayResult rayResult;

layout (set = 1, binding = 2) uniform DirectionalLight {
    vec4 directionAndIntensity;
    vec4 color;
} dirLight;

layout (push_constant) uniform Info {
    int frameIndex;
} frameInfo;



void main() {
    const vec2 pixelCoords = vec2(gl_LaunchIDEXT.x, gl_LaunchIDEXT.y);
    
    const vec4 positionData = texelFetch(gBufferPosition, ivec2(pixelCoords), 0);

    // Comprobar si hay geometría registrada en el píxel.
    // Si alfa < 1.0, no se renderizó geometría en el GBuffer.
    if (positionData.a < 0.8) {
        imageStore(shadowsImage, ivec2(pixelCoords), vec4(1.0, 0, 0, 1));
        return;
    }

    const vec3 position = positionData.xyz;
    
    const vec3 origin = position;
    const vec3 direction = -dirLight.directionAndIntensity.xyz;
    const vec3 lightTangent = normalize(cross(direction, vec3(0.0, 1.0, 0.0)));
    const vec3 lightBitangent = normalize(cross(lightTangent, direction));

    uint rayFlags = gl_RayFlagsOpaqueEXT | gl_RayFlagsTerminateOnFirstHitEXT;
    uint cullMask = 0xff;
    float minDistance = 0.01;
    float maxDistance = 100.0;

    // Monte-Carlo:
    vec2 perFrameNoise = texture(noiseImageX, vec2(0, frameInfo.frameIndex) / textureSize(noiseImageX, 0).xy).rg;
    float perPixelNoise = texture(noiseImage, (perFrameNoise + pixelCoords * float(frameInfo.frameIndex)) / textureSize(noiseImage, 0).xy).r;
    
    float angle = fract(perPixelNoise * 0.61803398875) * 2.0 * 3.14159; 
    const float radius = 0.2;

    vec2 diskPoint = vec2(radius * cos(angle) * perFrameNoise.x, radius * sin(angle) * perFrameNoise.y);
    diskPoint.x = perFrameNoise.x * cos(angle) - perFrameNoise.y * sin(angle);
    diskPoint.y = perFrameNoise.x * sin(angle) + perFrameNoise.y * cos(angle);
    diskPoint *= radius;

    // Trazado:

    const vec3 currentDir = normalize(direction + diskPoint.x * lightTangent + diskPoint.y * lightBitangent);
    traceRayEXT(topLevelAccelerationStructure, rayFlags, cullMask, 0, 0, 0, origin, minDistance, currentDir, maxDistance, 0);
    
    const float shadow = float(!rayResult.isInShadows);
    imageStore(shadowsImage, ivec2(pixelCoords), vec4(shadow, 0, 0, 1));
}
