#version 460

#extension GL_EXT_ray_tracing : require
#extension GL_EXT_nonuniform_qualifier : require

layout (set = 0, binding = 0) uniform accelerationStructureEXT topLevelAccelerationStructure;
layout (set = 0, binding = 1, rgba8) uniform image2D targetImage;

struct RayResult {
    vec4 color;
    float distance;
    vec3 normal;
};

layout (location = 0) rayPayloadEXT RayResult rayResult;

layout (constant_id = 0) const int MAX_RECURSION = 1;

layout (set = 1, binding = 0) uniform Camera {
    mat4 projection;
    mat4 view;

    vec3 cameraPos;
} camera;

void main() {
    const vec2 pixelCenter = vec2(gl_LaunchIDEXT.x, gl_LaunchSizeEXT.y - gl_LaunchIDEXT.y) + vec2(0.5);
    const vec2 inTexCoords = pixelCenter / vec2(gl_LaunchSizeEXT.xy);
    const vec2 d = inTexCoords * 2.0 - 1.0;

    vec4 origin = inverse(camera.view) * vec4(0, 0, 0, 1);
    vec4 target = inverse(camera.projection) * vec4(d.x, d.y, 1, 1);
    vec4 direction = inverse(camera.view) * vec4(normalize(target.xyz / target.w), 0);

    uint rayFlags = gl_RayFlagsOpaqueEXT | gl_RayFlagsTerminateOnFirstHitEXT;
    uint cullMask = 0xff;
    float minDistance = 0.0001;
    float maxDistance = 1000.0;

    vec4 color = vec4(0.0);

    for (int i = 0; i < 1; i++) {
        traceRayEXT(topLevelAccelerationStructure, rayFlags, cullMask, 0, 0, 0, origin.xyz, minDistance, direction.xyz, maxDistance, 0);
        
        break;
    }

    color = vec4(rayResult.normal.xyz, 1.0);

    imageStore(targetImage, ivec2(gl_LaunchIDEXT.xy), color);
}
