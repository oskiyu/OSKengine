TextureCube<float4> image : register(t0, space0);
SamplerState _image_sampler : register(s0, space0);

static float3 inPosition;
static float4 outColor;

struct SPIRV_Cross_Input
{
    float3 inPosition : TEXCOORD0;
};

struct SPIRV_Cross_Output
{
    float4 outColor : SV_Target0;
};

void frag_main()
{
    float3 pos = float3(inPosition.x, -inPosition.y, inPosition.z);
    float3 normal = normalize(pos);
    float3 right = normalize(cross(float3(0.0f, 1.0f, 0.0f), normal));
    float3 up = normalize(cross(right, normal));
    float3 accumulatedIrradiance = 0.0f.xxx;
    float numSamples = 0.0f;
    for (float phi = 0.0f; phi < 6.283185482025146484375f; phi += 0.07500000298023223876953125f)
    {
        for (float theta = 0.0f; theta < 1.57079637050628662109375f; theta += 0.07500000298023223876953125f)
        {
            float3 tangent = float3(sin(theta) * cos(phi), sin(theta) * sin(phi), cos(theta));
            float3 sampleVec = ((right * tangent.x) + (up * tangent.y)) + (normal * tangent.z);
            accumulatedIrradiance += ((image.Sample(_image_sampler, sampleVec).xyz * cos(theta)) * sin(theta));
            numSamples += 1.0f;
        }
    }
    accumulatedIrradiance = (accumulatedIrradiance * 3.1415927410125732421875f) * (1.0f / numSamples);
    outColor = float4(accumulatedIrradiance, 1.0f);
}

SPIRV_Cross_Output main(SPIRV_Cross_Input stage_input)
{
    inPosition = stage_input.inPosition;
    frag_main();
    SPIRV_Cross_Output stage_output;
    stage_output.outColor = outColor;
    return stage_output;
}

