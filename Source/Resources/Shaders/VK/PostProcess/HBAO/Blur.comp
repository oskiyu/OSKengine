#version 460

layout (local_size_x = 8, local_size_y = 8) in;

layout (set = 0, binding = 0) uniform sampler2D unblurredHbao;
layout (set = 0, binding = 2) uniform sampler2D depthImage;
layout (set = 0, binding = 1, r16f) uniform writeonly image2D finalImage;

layout(push_constant) uniform Direction {
    int direction;
} direction;

const float KERNEL3[3] = { 1.0 / 4.0, 1.0 / 2.0, 1.0 / 4.0 };
const float KERNEL5[5] = { 1.0 / 16.0, 4.0 / 16.0, 6.0 / 16.0, 4.0 / 16.0, 1.0 / 16.0 };

void main() {
    const vec2 sourceSize = textureSize(unblurredHbao, 0);
    const vec2 targetSize = imageSize(finalImage);

    const ivec2 coords = ivec2(gl_GlobalInvocationID.xy);
    const vec2 dir = direction.direction == 0
        ? vec2(0.0, 1.0)
        : vec2(1.0, 0.0);

    const vec2 extradir = vec2(0.5);

    const float checkRatio = direction.direction == 0 ? 0.7 : 0.9;

    const float centerHbao = textureLod(unblurredHbao, vec2(coords) / targetSize, 0).r;

    const vec2 radius = vec2(3.25);

    float sum = 0.0;
    float num = 0;
    for (int i = -2; i <= 2; i++) {
        const vec2 nCoords_f = coords + dir * i * (sourceSize / targetSize) * radius + extradir * sign(i);
        const ivec2 nCoords = ivec2(nCoords_f);
        const vec2 normalizedNewCoords = vec2(nCoords) / targetSize;
        
        const float nHbao = textureLod(unblurredHbao, normalizedNewCoords, 0).r * KERNEL5[i + 2];

        float ratio = 1.0;
        const float hbaoDiff = abs(nHbao - centerHbao);

        if (hbaoDiff > checkRatio) ratio = mix(0.5, 0.0, checkRatio - hbaoDiff);

        sum += textureLod(unblurredHbao, normalizedNewCoords, 0).r * KERNEL5[i + 2] * ratio;
        num += KERNEL5[i + 2] * ratio;
    }
    
    imageStore(finalImage, ivec2(gl_GlobalInvocationID.xy), vec4(sum / num, 0.0, 0.0, 1.0));
}
