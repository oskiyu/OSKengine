#version 460

#include "../../Common/denoising.glsl"

layout (local_size_x = 8, local_size_y = 8) in;

layout (set = 0, binding = 0) uniform sampler2D reprojectedImg;

layout (set = 0, binding = 1, rgba32f) uniform writeonly image2D denoisedShadowsImg;

layout (set = 0, binding = 2) uniform sampler2D currentPositionImg;
layout (set = 0, binding = 3) uniform sampler2D historicalPositionImg;

layout (set = 0, binding = 4) uniform sampler2D currentNormalImg;
layout (set = 0, binding = 5) uniform sampler2D historicalNormalImg;



// Obtiene la varianza en las coordenadas dadas,
// usando un Gaussian Blur 3x3.
float GetVariance(ivec2 coords) {
    float sum = 0;
    float count = 0.0;

    const float kernel[2][2] = {
        { 1.0 / 4.0, 1.0 / 8.0 },
        { 1.0 / 8.0, 1.0 / 16.0 }
    };

    const int radius = 12;
    for (int x = -radius; x < radius; x++) {
        for (int y = -radius; y < radius; y++) {
            const ivec2 nCoords = coords + ivec2(x, y);
            const float weight = kernel[abs(x)][abs(y)];

            sum += texelFetch(reprojectedImg, nCoords, 0).a * weight;
            count += weight;
        }   
    }

    sum /= count;

    return sum + 0.01;
}

// Realiza el filtrado ATrous sobre la imagen reproyectada.
// Devuelve el valor de la sombra.
// También recalcula la varianza.
float ATrousBlur(ivec2 coords, out float varianza) {
    const float kernelWeights[3] = { 1.0, 2.0 / 3.0, 1.0 / 6.0 };

    const vec2 centerData = texelFetch(reprojectedImg, coords, 0).xz;

    float sumWeights = 1.0;

    const float centerShadow = centerData.x;
    const float centerVarianza = centerData.y;

    float shadow = centerShadow;
    varianza = centerVarianza;

    const int radius = 2;
    const int numIterations = 3;

    const float varianzaVisibility = 10 * sqrt(max(1e-10, 1e-10 + GetVariance(coords)));

    for (int i = 0; i < numIterations; i++) {
        const int step = 1 << i;

        for (int x = -radius; x <= radius; x++) {
            for (int y = -radius; y <= radius; y++) {
                if (i != 0 && x == 0 && y == 0) continue;

                const ivec2 nCoords = coords + ivec2(x * step, y * step);
                const vec2 pixelData = texelFetch(reprojectedImg, nCoords, 0).xz;

                const float pixelShadow = pixelData.x;
                const float pixelVar = pixelData.y;
                
                const float weight = 
                    kernelWeights[abs(x)] * kernelWeights[abs(y)]
                     * (abs(centerShadow - pixelShadow) / varianzaVisibility);
                
                // Mayor varianza central = menor peso
                // Mayor diferencia entre píxeles = mayor peso

                shadow += pixelShadow * weight;
                varianza += pixelVar * weight * weight;
                sumWeights += weight;
            }
        }
    }

    shadow = shadow / sumWeights;
    varianza = varianza / (sumWeights * sumWeights);

    return shadow;
}

float NoBlur(ivec2 coords) {
    return texelFetch(reprojectedImg, coords, 0).r;
}

void main() {
    const ivec2 coords = ivec2(gl_GlobalInvocationID);

    if (coords.x > imageSize(denoisedShadowsImg).x || coords.y > imageSize(denoisedShadowsImg).y)
        return;

    float varianza = 0.0;
    const float shadow = ATrousBlur(coords, varianza);
    
    const float historyLength = texelFetch(reprojectedImg, coords, 0).y;
    
    imageStore(denoisedShadowsImg, coords, vec4(shadow, historyLength, varianza, 0.0));
    //imageStore(denoisedShadowsImg, coords, vec4(varianza, historyLength, varianza, 0.0));
}
